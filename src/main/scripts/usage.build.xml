<?xml version="1.0"?>
<!--
 
 Copyright 2012 SAP AG
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->
<project name="nwclouddeploy" basedir="." default="usage">

    <!-- ============================================================ -->
    <!-- Property definitions and initialization task -->
    <!-- ============================================================ -->

	<!-- Read properties from properties file -->
	<property file="nwcloud.properties"/>

	<target name="init">

		<!-- Copy all environment variables to according project properties with prefix "env." -->
		<property environment="env"/>

		<!-- Set arguments for basedir and logging of deployment tool -->
		<property name="sdk.args" value="-Dneo.logging.location=&quot;${sdk.dir}/tools/log&quot; -Dneo.base.location=&quot;${sdk.dir}/tools/.&quot;" />

		<!-- Define default directories for local server and check if local server already exists -->
		<property name="nwl.dir" value="${sdk.dir}/server" />
		<property name="nwl.pickup" value="${nwl.dir}/pickup" />
		<property name="nwl.webapps" value="${nwl.dir}/webapps" />
		<property name="nwl.work" value="${nwl.dir}/work" />
		<condition property="local.server.exists">
			<available file="${nwl.dir}" type="dir"/>
		</condition>

		<!-- Define directory where to look for WAR file -->
		<property name="war.dir" value="target" />

		<!-- Use JavaScript to compute some properties -->
		<script language="javascript"><![CDATA[
			
			// Define trim() function for Strings, if not already defined
			if (!String.trim) {
				String.prototype.trim = function () {
					return this.replace(/^(\s|\u00A0)+|(\s|\u00A0)+$/g, "");
				};
			}

			// If proxy settings are not defined in properties file, then try to fetch from environment variables or Maven settings
			if (project.getProperty("sdk.proxy")==null) {
				var proxyargs = "";

				// Try to fetch from environment variables - the Windows way...
				if (project.getProperty("env.HTTP_PROXY_HOST")       !=null) proxyargs += " -Dhttp.proxyHost="      + project.getProperty("env.HTTP_PROXY_HOST");
				if (project.getProperty("env.HTTP_PROXY_PORT")       !=null) proxyargs += " -Dhttp.proxyPort="      + project.getProperty("env.HTTP_PROXY_PORT");
				if (project.getProperty("env.HTTPS_PROXY_HOST")      !=null) proxyargs += " -Dhttps.proxyHost="     + project.getProperty("env.HTTPS_PROXY_HOST");
				if (project.getProperty("env.HTTPS_PROXY_PORT")      !=null) proxyargs += " -Dhttps.proxyPort="     + project.getProperty("env.HTTPS_PROXY_PORT");
				if (project.getProperty("env.HTTP_NON_PROXY_HOSTS")  !=null) proxyargs += " -Dhttp.nonProxyHosts="  + project.getProperty("env.HTTP_NON_PROXY_HOSTS");
				if (project.getProperty("env.HTTPS_NON_PROXY_HOSTS") !=null) proxyargs += " -Dhttps.nonProxyHosts=" + project.getProperty("env.HTTPS_NON_PROXY_HOSTS");
			
			    // Try to fetch from environment variables - the Unix way...
				if (proxyargs=="") {
					var envvar = null;
					if (project.getProperty("env.HTTP_PROXY") !=null) envvar=project.getProperty("env.HTTP_PROXY");
					if (project.getProperty("env.http_proxy") !=null) envvar=project.getProperty("env.http_proxy");
					if (envvar !=null) {
						try {
							var parts = envvar.match(/(.*):\/\/(.*):(.*)/);
							proxyargs += " -Dhttp.proxyHost=" + parts[2];
							proxyargs += " -Dhttp.proxyPort=" + parts[3];
						} catch(err) { }
					}
					envvar = null;
					if (project.getProperty("env.HTTPS_PROXY") !=null) envvar=project.getProperty("env.HTTPS_PROXY");
					if (project.getProperty("env.https_proxy") !=null) envvar=project.getProperty("env.https_proxy");
					if (envvar !=null) {
						try {
							var parts = envvar.match(/(.*):\/\/(.*):(.*)/);
							proxyargs += " -Dhttps.proxyHost=" + parts[2];
							proxyargs += " -Dhttps.proxyPort=" + parts[3];
						} catch(err) { }
					}
					envvar = null;
					if (project.getProperty("env.NO_PROXY") !=null) envvar=project.getProperty("env.NO_PROXY");
					if (project.getProperty("env.no_proxy") !=null) envvar=project.getProperty("env.no_proxy");
					if (envvar !=null) {
						try {
							var delimited = (new String(envvar)).replace(/(\s*),(\s*)/g, "|");
							proxyargs += " -Dhttp.nonProxyHosts=\""  + delimited + "\"";
							proxyargs += " -Dhttps.nonProxyHosts=\"" + delimited  + "\"";
						} catch(err) { }
					}
				}

				// Try to fetch from Maven...
				if (proxyargs=="") {
					try {
						// org.apache.maven.execution.MavenSession.getRequest() -> MavenExecutionRequest.getProxies() -> List<Proxy> 
						var mavenProxies = this.session.getRequest().getProxies().toArray();
						var mavenProxyIndex;
		        		for (mavenProxyIndex in mavenProxies) {
							var mavenProxy = mavenProxies[mavenProxyIndex];
							if (mavenProxy.isActive()) {
								// This might look weird, but Maven just uses the first active proxy in 'settings.xml' - either http or https.
								// For convenience we set this one proxy for both protocols. If separate proxies are needed, then use environment
								// variables or override proxy settings in 'nwcloud.properties'.
								if ((mavenProxy.getProtocol().toLowerCase()=="http") || (mavenProxy.getProtocol().toLowerCase()=="https")) {								
									if (mavenProxy.getHost()          !=null) proxyargs += " -Dhttp.proxyHost="        + mavenProxy.getHost();
									if (mavenProxy.getPort()          !=null) proxyargs += " -Dhttp.proxyPort="        + mavenProxy.getPort();
									if (mavenProxy.getNonProxyHosts() !=null) proxyargs += " -Dhttp.nonProxyHosts=\""  + mavenProxy.getNonProxyHosts() + "\"";
									if (mavenProxy.getHost()          !=null) proxyargs += " -Dhttps.proxyHost="       + mavenProxy.getHost();
									if (mavenProxy.getPort()          !=null) proxyargs += " -Dhttps.proxyPort="       + mavenProxy.getPort();
									if (mavenProxy.getNonProxyHosts() !=null) proxyargs += " -Dhttps.nonProxyHosts=\"" + mavenProxy.getNonProxyHosts() + "\"";
								}
							}
		        		}
					} catch(err) { }
				}
		
				project.setProperty("sdk.proxy.set", proxyargs.trim());
			} else {
				project.setProperty("sdk.proxy.set", project.getProperty("sdk.proxy"));
			}

			// Did the user provide a password in the properties file (or via parameter "-Dpassword=..." on commandline)?
			if (project.getProperty("password")==null) {
				project.setProperty("password.show", "not specified");
			} else {
				project.setProperty("password.set", project.getProperty("password"));
				project.setProperty("password.show", "specified, but not shown");
			}

			// Setting project.name to maven.project.name if it could be queried from Maven.
			// If not (e.g. Ant script not executed as Maven plugin), set it to war.name from nwcloud.properties.
			try { project.setProperty("maven.project.name", this.session.getCurrentProject().getName()); } catch (err) { }
			mavenprojectname = project.getProperty("maven.project.name");
			warname = project.getProperty("war.name");
			if (mavenprojectname==null) {
				project.setProperty("project.name",warname);
			} else {
				project.setProperty("project.name",mavenprojectname);
			}

			// Setting project.version to maven.project.version if it could be queried from Maven.
			// If not (e.g. Ant script not executed as Maven plugin), set it to an empty string.
			try { project.setProperty("maven.project.version", this.session.getCurrentProject().getVersion()); } catch (err) { }
			mavenprojectversion = project.getProperty("maven.project.version");
			if (mavenprojectname==null) {
				project.setProperty("project.version","");
			} else {
				project.setProperty("project.version",mavenprojectversion);
			}

			// Set url.arg to hold the optional URL argument if url is set in nwcloud.properties
			if (project.getProperty("url")==null) {
				project.setProperty("url.arg", "");
			} else {
				project.setProperty("url.arg", " -url " + project.getProperty("url"));
			}

			// Set component.arg to hold the optional component argument if component is set in nwcloud.properties
			if (project.getProperty("component")==null) {
				project.setProperty("component.arg", "");
			} else {
				project.setProperty("component.arg", " -component " + project.getProperty("component"));
			}

			// Set severity.arg to hold the optional severity argument if severity is set in nwcloud.properties
			if (project.getProperty("severity")==null) {
				project.setProperty("severity.arg", "");
			} else {
				project.setProperty("severity.arg", " --severity " + project.getProperty("severity"));
			}

			// Set minimum-processes.arg to hold the optional minimum-processes argument if minimum-processes is set in nwcloud.properties
			if (project.getProperty("minimum-processes")==null) {
				project.setProperty("minimum-processes.arg", "");
			} else {
				project.setProperty("minimum-processes.arg", " --minimum-processes " + project.getProperty("minimum-processes"));
			}

			// Set maximum-processes.arg to hold the optional maximum-processes argument if maximum-processes is set in nwcloud.properties
			if (project.getProperty("maximum-processes")==null) {
				project.setProperty("maximum-processes.arg", "");
			} else {
				project.setProperty("maximum-processes.arg", " --maximum-processes " + project.getProperty("maximum-processes"));
			}

			// Set synchronous.arg to hold the optional synchronous argument if synchronous is set in nwcloud.properties
			if (project.getProperty("synchronous")==null) {
				project.setProperty("synchronous.arg", "");
			} else {
				if (project.getProperty("synchronous").toLowerCase()=="true") {
					project.setProperty("synchronous.arg", " --synchronous");
				} else {
					project.setProperty("synchronous.arg", "");
				}
			}

			// Set java-version.arg to hold the optional java-version argument if java-version is set in nwcloud.properties
			if (project.getProperty("java-version")==null) {
				project.setProperty("java-version.arg", "");
			} else {
				project.setProperty("java-version.arg", " --java-version " + project.getProperty("java-version"));
			}

			// Set source.set to either source from nwcloud.properties or compute from war dir, project name and version if not set
			if (project.getProperty("source")==null) {
				wardir=project.getProperty("war.dir");
				projectversion=project.getProperty("project.version");
				if (projectversion.length()==0) {
					project.setProperty("source.set",wardir+"/"+project.getProperty("project.name")+".war");
				} else {
					project.setProperty("source.set",wardir+"/"+project.getProperty("project.name")+"-"+projectversion+".war");
				}
			} else {
				project.setProperty("source.set",project.getProperty("source"));
			}

			// Set application.set to application if it is set in nwcloud.properties. Otherwise use project name in lowercase.
			if (project.getProperty("application")==null) {
				project.setProperty("application.set", project.getProperty("project.name").toLowerCase());
			} else {
				project.setProperty("application.set", project.getProperty("application"));
			}
			
			// Set compression.arg if it is set in nwcloud.properties.
			if (project.getProperty("compression")==null) {
				project.setProperty("compression.arg", "");
			} else {
				project.setProperty("compression.arg", " --compression " + project.getProperty("compression"));
			}
			
			// Set compressible-mime-type.arg if it is set in nwcloud.properties.
			if (project.getProperty("compressible-mime-type")==null) {
				project.setProperty("compressible-mime-type.arg", "");
			} else {
				project.setProperty("compressible-mime-type.arg", " --compressible-mime-type " + project.getProperty("compressible-mime-type"));
			}
			
			// Set compression-min-size.arg if it is set in nwcloud.properties.
			if (project.getProperty("compression-min-size")==null) {
				project.setProperty("compression-min-size.arg", "");
			} else {
				project.setProperty("compression-min-size.arg", " --compression-min-size " + project.getProperty("compression-min-size"));
			}
			
			// Set vm-argument.arg if it is set in nwcloud.properties.
			if (project.getProperty("vm-argument")==null) {
				project.setProperty("vm-argument.arg", "");
			} else {
				project.setProperty("vm-argument.arg", " --vm-argument " + project.getProperty("vm-argument"));
			}
			
		]]> </script>

	</target>

    <!-- =================================================================================== -->
    <!-- Password: Query password if not given in properties file or Maven's "settings.xml". -->
    <!-- =================================================================================== -->

	<target name="password">

		<!-- If password not provided in properties, check if matching server entry with password can be found in Maven's "settings.xml".
		     If no matching server with password could be found, query the user for a password on the console. -->
		<script language="javascript"><![CDATA[

			if (project.getProperty("password")==null) {
			
				// ----------------------------------------------------------------------------------
				// -- Check for (encrypted) passwords in Maven's "settings.xml" matching the setup --
				// ----------------------------------------------------------------------------------
	
				// What we're doing in the following is:
				//  - Get hold of the PluginContext that can be used to share key-value-pairs between the Mojos of a plugin.
				//  - Put "host", "account" and "user" (if known) into the PluginContext.
				//  - Execute our Mojo (goal) "getpwd" to check if there is a matching password stored in Maven's "settings.xml".
				//  - If PluginContext now contains a "password" key, store its value as password in the project properties.
	
				// Importing the class that represents the Mojo we want to execute.
				importClass(com.sap.research.maven.plugin.nwcloud.NWCloudGetPwd);

				// Helper function to convert Mojo configuration
				//  - A Mojo configuration that one can get using MojoDescriptor.getConfiguration() is of type org.codehaus.plexus.configuration.PlexusConfiguration.
				//  - When we want to create a MojoExecution object to execute a Mojo, we need this config in Xpp3Dom format.
				//  -> This function converts the config from PlexusConfiguration to Xpp3Dom format.
			    function convertPlexusConfigurationToXpp3Dom(config) {
					var result = new org.codehaus.plexus.util.xml.Xpp3Dom(config.getName());
					result.setValue(config.getValue());
					var name;
			        for (name in config.getAttributeNames()) {
			            result.setAttribute(config.getAttributeNames()[name], config.getAttribute(config.getAttributeNames()[name]));
			        }
					var child;
					var children = config.getChildren();
			        for (child in children) {
						result.addChild(convertPlexusConfigurationToXpp3Dom(children[child]));
					}
			        return (result);
			    }
				
				// org.apache.maven.execution.MavenSession
				var ourSession = this.session;
	
				// org.apache.maven.project.MavenProject
				var ourProject = this.session.getCurrentProject();
				
				// org.apache.maven.plugin.descriptor.PluginDescriptor
				var ourPluginDescriptor = this.mojoExecution.getMojoDescriptor().getPluginDescriptor();
				
				// Get the PluginContext using org.apache.maven.execution.MavenSession.getPluginContext(...) function.
				// The result is a Map which can be used to store key-value-pairs that are available in all Mojos of a plugin.
				// Using this Map we can exchange data between all our Mojos. 
				var pluginContext = ourSession.getPluginContext(ourPluginDescriptor, ourProject);
				pluginContext.put("internal", "true");
				if (project.getProperty("host")!=null) {
					pluginContext.put("host", project.getProperty("host"));	
				}
				if (project.getProperty("account")!=null) {
					pluginContext.put("account", project.getProperty("account"));	
				}
				if (project.getProperty("user")!=null) {
					pluginContext.put("user", project.getProperty("user"));	
				}
	
				// Using org.apache.maven.plugin.MojoExecution, we fetch an instance of org.apache.maven.model.Plugin representing our own plugin. 
				var ourPlugin = this.mojoExecution.getPlugin();
	
				// For execution of a Mojo we need to provide some configuration in Xpp3Dom format.
				// As we do not need to pass any additional parameters, we just create an empty Xpp3Dom named "configuration".
				var ourConfig = new org.codehaus.plexus.util.xml.Xpp3Dom("configuration");
				
				// Now we get the goal "getpwd" of our plugin we want to execute.
				// It is represented by an instance of org.apache.maven.plugin.descriptor.MojoDescriptor. 
				var ourGoal = ourPluginDescriptor.getMojo("getpwd");
				
				// Now we merge our (currently empty) config for executing the Mojo with the config the Mojo needs.
				// The config of the Mojo is a org.codehaus.plexus.configuration.PlexusConfiguration and needs to be converted to Xpp3Dom to be used by us.
				// We use our small helper function "convertPlexusConfigurationToXpp3Dom" to get the transformation done.
				ourConfig = org.codehaus.plexus.util.xml.Xpp3DomUtils.mergeXpp3Dom(ourConfig, convertPlexusConfigurationToXpp3Dom(ourGoal.getMojoConfiguration()));
				
				// Now that we have our goal (Mojo) and its configuration in proper format, we create a MojoExecution object for its execution.
				var ourExecution = new org.apache.maven.plugin.MojoExecution(ourGoal, ourConfig);
	
				// To execute another Mojo, we need an instance of a class implementing org.apache.maven.plugin.BuildPluginManager.
				// We ask the container we're running in for a matching Component (doing "manual depedency injection" here)  
				var ourBuildPluginManager = this.session.getContainer().lookup(org.apache.maven.plugin.BuildPluginManager);
	
				// Finally we execute the create MojoExecution object in our MavenSession using the BuildPluginManager we got from the container. 
				ourBuildPluginManager.executeMojo(ourSession, ourExecution);
				
				// Now we check if we got a result stored in key "password" in the PluginContext
				if (pluginContext.containsKey("password")) {
					project.setProperty("password.set", pluginContext.get("password"));
				} else {
			
					// ----------------------------------------------------------------------------------
					// -- If still no password found, then query user on console                       --
					// ----------------------------------------------------------------------------------

					var syscon = java.lang.System.console();
					if (syscon != null) {
						syscon.writer().println("No password for SAP HANA Cloud user specified.")
						syscon.writer().print("Please enter password: ")
						syscon.writer().flush();
						var passwd = new java.lang.String(syscon.readPassword());
						project.setProperty("password.set", passwd);
					}
				}
			
			}

		]]> </script>

	</target>

    <!-- ============================================================ -->
    <!-- Usage: Show available targets and used settings (propeties)  -->
    <!-- ============================================================ -->

	<target name="usage" depends="init">
		<echo message=""/>
		<echo message="Ant build file for SAP HANA Cloud deployment"/>
		<echo message="============================================"/>
		<echo message=""/>
		<echo message="Available targets"/>
		<echo message="-----------------"/>
		<echo message=""/>
		<echo message="deploy        ->  Deploy WAR as app to Cloud"/>
		<echo message="deploy-dir    ->  Deploy all WARs from directory specified in 'source' parameter as app to cloud"/>
		<echo message="start         ->  Start app instance on Cloud"/>
		<echo message="stop          ->  Stop app instance on Cloud"/>
		<echo message="restart       ->  Restart app instance on Cloud"/>
		<echo message="undeploy      ->  Undeploy app from Cloud"/>
		<echo message="status        ->  Show status of app on Cloud"/>
		<echo message="apps          ->  Show apps deployed on Cloud account"/>
		<echo message="comps         ->  Show components of deployed app on Cloud"/>
		<echo message=""/>
		<echo message="deploy-local  ->  Deploy WAR to local Cloud server"/>
		<echo message="start-local   ->  Start local Cloud server"/>
		<echo message="stop-local    ->  Stop local Cloud server"/>
		<echo message="clean-local   ->  Delete WAR from local Cloud server"/>
		<echo message=""/>
		<echo message="Settings available in Ant"/>
		<echo message="-------------------------"/>
		<echo message=""/>
		<echo message="basedir               = ${basedir}"/>
		<echo message=""/>
		<echo message="Settings passed by Maven"/>
		<echo message="------------------------"/>
		<echo message=""/>
		<echo message="maven.project.name    = ${maven.project.name}"/>
		<echo message="maven.project.version = ${maven.project.version}"/>
		<echo message=""/>
		<echo message="Settings from nwcloud.properties"/>
		<echo message="--------------------------------"/>
		<echo message=""/>
		<echo message="war.name              = ${war.name}"/>
		<echo message="source                = ${source}"/>
		<echo message="sdk.dir               = ${sdk.dir}"/>
		<echo message="sdk.proxy             = ${sdk.proxy}"/>
		<echo message="host                  = ${host}"/>
		<echo message="account               = ${account}"/>
		<echo message="application           = ${application}"/>
		<echo message="component             = ${component}"/>
		<echo message="url                   = ${url}"/>
		<echo message="java-version          = ${java-version}"/>
		<echo message="user                  = ${user}"/>
		<echo message="password              = ${password.show}"/>
		<echo message=""/>
		<echo message="Settings derived"/>
		<echo message="----------------"/>
		<echo message=""/>
		<echo message="project.name                = ${project.name}"/>
		<echo message="project.version             = ${project.version}"/>
		<echo message="war.dir                     = ${war.dir}"/>
		<echo message="source.set                  = ${source.set}"/>
		<echo message="sdk.args                    = ${sdk.args}"/>
		<echo message="sdk.proxy.set               = ${sdk.proxy.set}"/>
		<echo message="application.set             = ${application.set}"/>
		<echo message="component.arg               = ${component.arg}"/>
		<echo message="url.arg                     = ${url.arg}"/>
		<echo message="java-version.arg            = ${java-version.arg}"/>
		<echo message="severity.arg                = ${severity.arg}"/>
		<echo message="minimum-processes.arg       = ${minimum-processes.arg}"/>
		<echo message="maximum-processes.arg       = ${maximum-processes.arg}"/>
		<echo message="synchronous.arg             = ${synchronous.arg}"/>
		<echo message="compression.arg             = ${compression.arg}"/>
		<echo message="compressible-mime-type.arg  = ${compressible-mime-type.arg}"/>
		<echo message="compression-min-size.arg    = ${compression-min-size.arg}"/>
		<echo message="vm-argument.arg             = ${vm-argument.arg}"/>
		<echo message="local.server.exists         = ${local.server.exists}"/>
		<echo message="nwl.dir                     = ${nwl.dir}"/>
		<echo message="nwl.pickup                  = ${nwl.pickup}"/>
		<echo message="nwl.webapps                 = ${nwl.webapps}"/>
		<echo message="nwl.work                    = ${nwl.work}"/>
		<echo message=""/>

	</target>

    <!-- ============================================================ -->
    <!-- hint: Target to show hint on what to do after packaging      -->
    <!-- ============================================================ -->

	<target name="hint" depends="init">
		<echo message=""/>
		<echo message="WAR file created"/>
		<echo message="================"/>
		<echo message=""/>
		<echo message="Your application has been packaged to a WAR file:"/>
		<pathconvert targetos="unix" property="source.unix">
			<path>
				<pathelement location="${source.set}"/>
			</path>
		</pathconvert>
		<echo message="${source.unix}"/>
		<echo message=""/>
		<echo message="What to do now?"/>
		<echo message="---------------"/>
		<echo message=""/>
		<echo message="You could use the NWCloud-Maven-Plugin now to deploy your"/>
		<echo message="app to SAP HANA Cloud, or test it on a local instance."/>
		<echo message=""/>
		<echo message="To use the NWCloud-Maven-Plugin, type"/>
		<echo message=""/>
		<echo message="mvn nwcloud:&lt;goal&gt;"/>
		<echo message=""/>
		<echo message="where &lt;goal&gt; is one of the following actions:"/>
		<echo message=""/>
		<echo message="deploy        ->  Deploy WAR as app to cloud"/>
		<echo message="deploy-dir    ->  Deploy all WARs from directory specified in 'source' parameter as app to cloud"/>
		<echo message="start         ->  Start app instance on cloud"/>
		<echo message="stop          ->  Stop app instance on cloud"/>
		<echo message="restart       ->  Restart app instance on Cloud"/>
		<echo message="undeploy      ->  Undeploy app from cloud"/>
		<echo message="status        ->  Show status of app on cloud"/>
		<echo message="apps          ->  Show apps deployed on cloud account"/>
		<echo message="comps         ->  Show components of deployed app on cloud"/>
		<echo message=""/>
		<echo message="deploy-local  ->  Deploy WAR to local cloud server"/>
		<echo message="start-local   ->  Start local cloud server"/>
		<echo message="stop-local    ->  Stop local cloud server"/>
		<echo message="clean-local   ->  Delete WAR from local cloud server"/>
		<echo message=""/>
		<echo message="usage         ->  Show usage info and currently used settings"/>
		<echo message=""/>
	</target>

    <!-- ============================================================ -->
    <!-- HANA Cloud -->
    <!-- ============================================================ -->

	<target name="deploy" description="Deploy WAR as app to HANA Cloud" depends="init,password">
		<!-- Copy WAR file to a name without version before deploying it (HANA Cloud might derive web context from WAR name) -->
		<copy file="${source.set}" tofile="${war.dir}/${project.name}.war" preservelastmodified="true"/>
		<pathconvert targetos="unix" property="source.unix">
			<path>
				<pathelement location="${war.dir}/${project.name}.war"/>
			</path>
		</pathconvert>
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="deploy --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set} --source &quot;${source.unix}&quot;${url.arg}${component.arg}${java-version.arg}${severity.arg}${minimum-processes.arg}${maximum-processes.arg}${compression.arg}${compressible-mime-type.arg}${compression-min-size.arg}${vm-argument.arg}"/>
		</java>
	</target>
	
	<target name="deploy-dir" description="Deploy all WARs from directory specified in 'source' parameter as app to cloud" depends="init,password">
		<java dir="${war.dir}/.." classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="deploy --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set} --source &quot;${source.set}&quot;${url.arg}${component.arg}${java-version.arg}${severity.arg}${minimum-processes.arg}${maximum-processes.arg}${compression.arg}${compressible-mime-type.arg}${compression-min-size.arg}${vm-argument.arg}"/>
		</java>
	</target>

	<target name="start" description="Start app instance on HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="start --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}${component.arg}${synchronous.arg}${compression.arg}${compressible-mime-type.arg}${compression-min-size.arg}${vm-argument.arg}"/>
		</java>
	</target>

	<target name="stop" description="Stop app instance on HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="stop --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}${component.arg}${synchronous.arg}"/>
		</java>
	</target>
	
	<target name="restart" description="Restart app instance on HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="restart --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}${synchronous.arg}"/>
		</java>
	</target>

	<target name="undeploy" description="Undeploy app from HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="undeploy --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}${component.arg}"/>
		</java>
	</target>

	<target name="status" description="Show status of app on HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="status --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}"/>
		</java>
	</target>

	<target name="apps" description="Show apps deployed on HANA Cloud account" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="list-applications --host ${host} --account ${account} --user ${user} --password ${password.set}"/>
		</java>
	</target>

	<target name="comps" description="Show components of deployed app on HANA Cloud" depends="init,password">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args} ${sdk.proxy.set}"/>
			<arg line="list-components --host ${host} --account ${account} --application ${application.set} --user ${user} --password ${password.set}"/>
		</java>
	</target>

    <!-- ============================================================ -->
    <!-- Local HANA Cloud -->
    <!-- ============================================================ -->

	<target name="check-local-server" depends="init" unless="local.server.exists">
		<echo>Creating local HANA Cloud server..."</echo>
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args}"/>
			<arg line="install-local"/>
		</java>
	</target>

	<target name="deploy-local" description="Deploy WAR to local HANA Cloud server" depends="init,check-local-server">
		<!-- Copy WAR file to a name without version before deploying it (server might derive web context from WAR name) -->
		<copy file="${source.set}" tofile="${war.dir}/${project.name}.war" preservelastmodified="true"/>
		<copy todir="${nwl.pickup}" preservelastmodified="true">
			<fileset dir="${war.dir}">
				<include name="${project.name}.war"/>
			</fileset>
		</copy>
	</target>

	<target name="start-local" description="Start local HANA Cloud server" depends="init,check-local-server">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args}"/>
			<arg line="start-local"/>
		</java>
	</target>

	<target name="stop-local" description="Stop local HANA Cloud server" depends="init,check-local-server">
		<java dir="${sdk.dir}/tools" classname="com.sap.jpaas.infrastructure.console.ConsoleClient" fork="true">
			<classpath>
				<fileset dir="${sdk.dir}/tools/lib/cmd">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg line="${sdk.args}"/>
			<arg line="stop-local"/>
		</java>
	</target>

	<target name="clean-local" description="Delete WAR from local HANA Cloud server" depends="init">
		<delete failonerror="false">
			<fileset dir="${nwl.pickup}">
				<include name="${project.name}.war"/>
			</fileset>
			<fileset dir="${nwl.pickup}/.state">
				<include name="${project.name}.*"/>
			</fileset>
		</delete>
		<delete dir="${nwl.webapps}/${project.name}" failonerror="false"/>
		<delete dir="${nwl.work}/Catalina" failonerror="false"/>
	</target>

</project>
